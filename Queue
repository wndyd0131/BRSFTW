#include <stdio.h>
#include <stdlib.h>
typedef struct que {
	int *que;
	int front;
	int rear;
	int size; //매개변수 바꿈: num 변수 제거; max를 size로 변경;
}QUEUE;

void InitQueue(QUEUE *q, int size) {
	if (q != NULL) {
		q->que = calloc(size, sizeof(int));
		q->front = 0;
		q->rear = 0;
		q->size = size; //front와 rear의 값을 -1이 아닌 0으로 변경
	}
}

int Enque(QUEUE *q, int data) {
	if (q->rear >= q->size) { //num이 아닌 rear에 대입
		printf("Queue is already full!\n");
		return -1;
	}
	else {
		q->que[q->rear] = data; //num++ 없앰
		q->rear++; //쓸데 없는 코드 제거
	}
	return 0;
}

int Deque(QUEUE *q, int *data) {
	if (q->rear <= 0) { //num이 아닌 rear와 비교
		printf("Queue is empty!\n");
		return -1;
	}
	else {
		int i;
		*data = q->que[q->front];
		for (i = 0; i < q->rear - 1; i++) {
			q->que[i] = q->que[i + 1]; //환형 큐의 특징을 잘못 넣은 것을 일반 큐의 특징으로 고침
		}
		q->rear--; //front++에서 rear--로 고침
	}
	return 0;
}

int Search(QUEUE *q, int data) {
	int i;
	if (q->rear < 0) {
		printf("Queue is empty!\n");
		return -1;
	}
	else{
		for (i = 0; i < q->rear; i++) {
			if (q->que[i] == data) { //정상적으로 data와 비교하도록 만듦, 원래는 이상한 공식 넣음
				printf("%d를 찾았습니다.\n", q->que[i]);
				return 0;
			}
		}
	}
	printf("%d를(을) 찾지 못했습니다.\n", data);
	return 0; //찾지 못할 경우 추가
}

void Print(QUEUE *q) {
	int i;
	for (i = 0; i < q->rear; i++) {
		printf("%d\n", q->que[i]); //이상한 공식을 정상적으로 바꿈
	}
}

void Terminate(QUEUE *q) {
	if (q != NULL) //q->que에서 q로 바꿈
		free(q->que);
	q->size = q->front = q->rear = 0;
}

int main() {
	int x;
	QUEUE que;
	InitQueue(&que, 8);
	Enque(&que, 5);
	Enque(&que, 3);
	Print(&que);
	Deque(&que, &x);
	Enque(&que, 12);
	Print(&que);
	Search(&que, 12);
	Search(&que, 11);
	Terminate(&que);
	return 0;
}
